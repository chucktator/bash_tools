#!/usr/bin/bash

__CONSOLE_SHORT_OPT_INDEX=0
__CONSOLE_LONG_OPT_INDEX=1
__CONSOLE_IS_FLAG_INDEX=2
__CONSOLE_TARGET_VARIABLE_INDEX=3

__console_parse_parameters() {
    getopt --test > /dev/null
    if [[ $? -ne 4 ]]; then
        echo "I’m sorry, `getopt --test` failed in this environment."
        exit 1
    fi

    # First parameter must be the options string passed to the calling script, store it and advance 1
    INPUT=$1
    shift

    OPTIONS="h"
    LONGOPTIONS="help"

    PARAMETER_DEFINITIONS=${@:1}

    # Build the parameter strings for getopt and set uninitialized variables to default values
    for var in $PARAMETER_DEFINITIONS; do
        declare -n optionArray=$var
        [[ ${optionArray[__CONSOLE_IS_FLAG_INDEX]} == false ]] && DELIM=":" || DELIM=""
        OPTIONS="$OPTIONS${optionArray[__CONSOLE_SHORT_OPT_INDEX]}$DELIM"
        LONGOPTIONS="$LONGOPTIONS${optionArray[__CONSOLE_LONG_OPT_INDEX]}$DELIM,"
        if [[ -z ${!optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]+x} ]]; then
            if [[ ${optionArray[__CONSOLE_IS_FLAG_INDEX]} == true ]]; then
                printf -v "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}" %s "false"
            else
                printf -v "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}" %s ""
            fi
        fi
    done



    # -temporarily store output to be able to check for errors
    # -e.g. use “--options” parameter by name to activate quoting/enhanced mode
    PARSED=$(getopt --options=$OPTIONS --long=$LONGOPTIONS --name "$0" -- $INPUT)
    if [[ $? != 0 ]]; then
        # e.g. $? == 1
        #  then getopt has complained about wrong arguments to stdout
        exit 2
    fi
    # read getopt’s output this way to handle the quoting right:
    eval set -- "$PARSED"

    # Now run through all the parsed parameters...
    while true; do
        if [[ $1 == "--" ]]; then
            break
        fi
        SHIFT_BY=1
        # ...and check them against the configured options passed into this function
        for option in $PARAMETER_DEFINITIONS; do
            declare -n optionArray="$option"
            #echo "Array: ${optionArray[@]}"
            #echo "Short Option: "${optionArray[__CONSOLE_SHORT_OPT_INDEX]}
            #echo "Long Option: "${optionArray[__CONSOLE_LONG_OPT_INDEX]}
            #echo "Param: "${optionArray[__CONSOLE_IS_FLAG_INDEX]}
            #echo "Single Value: "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}
            #echo "Single Value Expanded: "${!optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}
            echo "Checking -"${optionArray[__CONSOLE_SHORT_OPT_INDEX]}" equal to $1"
            echo "Checking --"${optionArray[__CONSOLE_LONG_OPT_INDEX]}" equal to $1"
            echo "Possible parameter value would be: $2"
            if [[ "-"${optionArray[__CONSOLE_SHORT_OPT_INDEX]} == $1 || "--"${optionArray[__CONSOLE_LONG_OPT_INDEX]} == $1 ]]; then
                if [[ ${2:0:1} != "-" && ${optionArray[__CONSOLE_IS_FLAG_INDEX]} == false ]]; then
                    # A parameter is required for the current opition, so read it and advance the pointer by 2
                    printf -v "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}" %s ""
                    while [[ ${2:0:1} != "-" ]]; do
                        echo "Possible parameter value would be: $2"
                        printf -v "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}" %s "${!optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}$2"
                        shift
                        echo "Next Possible: $2"
                    done
                    echo "Wrote follwing to variable: ${!optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}"
                elif [[ ${2:0:1} == "-" && ${optionArray[__CONSOLE_IS_FLAG_INDEX]} == true ]]; then
                    # The current option is only a flag, so set it and advance the pointer by 1
                    printf -v "${optionArray[__CONSOLE_TARGET_VARIABLE_INDEX]}" %s "true"
                else
                    # An error occured, which getopt should have caught
                    echo "A required parameter is missing. Exit."
                    exit 3
                fi
            fi
        done
        shift $SHIFT_BY

    done
}
